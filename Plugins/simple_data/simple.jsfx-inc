// adding some extra functions

@init

//filterdef
  LOWPASS   = 0;
  HIGHPASS   = 1;
  BANDPASS   = 2;
  NOTCH    = 3;
  PEAK    = 4;
  LOWSHELF  = 5;
  HIGHSHELF  = 6;

function doSomething (var1, var2)
  local(last_var)
  global()
  instance(me)
  (
  last_var = var1 * var2;
  // lasr_var = var1 * $pi * cos(varl/srate);
  );

function pregain(gain)
  (
  ret = (1.0 + 0.0932471 * gain + 0.00279033 * gain^2) /2
  );
  
function bq_process(sample)
  //global(srate)
  local(output)
  //instance(type, A, a0, a1, a2, a3, a4, b0, b1, b2, x1, x2, y1, y2, cf, bw, gain)
  (
   output = this.b0 * sample + (this.b1 * this.x1) + (this.b2 * this.x2) - (this.a1 * this.y1) - (this.a2 * this.y2);
   
   // alternate calc
   //output = this.a0 * sample + this.a1 * this.x1 + this.a2 * this.x2 - this.a3 * this.y1 - this.a4 * this.y2;
   
   
   this.x2 = this.x1;
   this.y2 = this.y1;
   this.x1 = sample;
   this.y1 = output;
   output;
   
  );
//(
 // );
  
function bq_create(filtertype, dbgain,  q, centerfreq, ibw)
  //global(srate)
  local(A, omega, sn, cs, alpha, beta, alpha_m_A, alpha_d_A)
  instance(type, A, a0, a1, a2, a3, a4, b0, b1, b2, x1, x2, y1, y2, cf, bw, gain)
  (
  type = filtertype;
  A = 10^(dbgain / 40);
  omega = ( 2 * $pi) * centerfreq / srate;
  sn = sin(omega);
  cs = cos(omega);
  //M_LN2 = 2; // unknown constant
  //alpha = sn * sin(M_LN2 / 2 * bw * omega / sn);
  alpha = sn / (2*q);
  beta = sqrt(A + A); 
  alpha_m_A = alpha * A;
  alpha_d_A = alpha / A;
  
 
    
  
  // section for selecting coefficient
  
      filtertype == LOWPASS ?
      (
        b0 = (1.0 - cs) /2.0;
        b1 = 1.0 - cs;
        b2 = (1.0 - cs) /2.0;
        a0 = 1.0 + alpha;
        a1 = -2.0 * cs;
        a2 = 1.0 - alpha;
      ):
      filtertype == HIGHPASS ?
      (
        b0 = (1.0 + cs) /2.0;
        b1 = -(1 + cs);
        b2 = (1.0 - cs) /2.0;
        a0 = 1.0 + alpha;
        a1 = -2.0 * cs;
        a2 = 1.0 - alpha;
      ):
      filtertype == BANDPASS ?
      (
       b0 = alpha;
       b1 = 0;
       b2 = -alpha;
       a0 = 1 + alpha;
       a1 = -2 * cs;
       a2 = 1 - alpha;
      ):
      filtertype == NOTCH ?
      (
       b0 = 1;
       b1 = -2 * cs;
       b2 = 1;
       a0 = 1 + alpha;
       a1 = -2 * cs;
       a2 = 1 - alpha;
      ):
      filtertype == PEAK ?  
      (
      b0 = 1 + (alpha * A);
      b1 = -2 * cs;
      b2 = 1 - (alpha * A);
      a0 = 1 + (alpha /A);
      a1 = -2 * cs;
      a2 = 1 - (alpha /A);
      ):
      filtertype == LOWSHELF ?
      (
       b0 = A * ((A + 1) - (A - 1) * cs + beta * sn);
       b1 = 2 * A * ((A - 1) - (A + 1) * cs);
       b2 = A * ((A + 1) - (A - 1) * cs - beta * sn);
       a0 = (A + 1) + (A - 1) * cs + beta * sn;
       a1 = -2 * ((A - 1) + (A + 1) * cs);
       a2 = (A + 1) + (A - 1) * cs - beta * sn;
      ):
      filtertype == HIGHSHELF ?
      (
       b0 = A * ((A + 1) + (A - 1) * cs + beta * sn);
       b1 = -2 * A * ((A - 1) + (A + 1) * cs);
       b2 = A * ((A + 1) + (A - 1) * cs - beta * sn);
       a0 = (A + 1) - (A - 1) * cs + beta * sn;
       a1 = 2 * ((A - 1) - (A + 1) * cs);
       a2 = (A + 1) - (A - 1) * cs - beta * sn;
      );
      
    // end of filter selection section
    
    
    
 /*   old coefficient selection
  b0 = 1 + alpha_m_A;
  b1 = -2 * cs;
  b2 = 1 - alpha_m_A;
  a0 = b0 / (1 + alpha_d_A);
  a1 = b1 / b1;
  a2 = b2 / (1 - alpha_d_A);
  */
  // scale
  
  a1 /= (a0);
    a2 /= (a0);
    b0 /= (a0);
    b1 /= (a0);
    b2 /= (a0);
  
  a3 = a1 / a0;
  a4 = a2 / a0;
  x1 = 0;
  x2 = 0;
  y1 = 0;
  y2 = 0;
  cf = centerfreq;
  bw = ibw;
  gain = dbgain;
  );
  
  function bq_load(filtertype, A, omega, sn, cs, alpha, beta)
  local()
  instance(type, A, a0, a1, a2, a3, a4, b0, b1, b2, x1, x2, y1, y2, cf, bw, gain)
  (
    filtertype == LOWPASS ?
    (
      b0 = (1.0 - cs) /2.0;
      b1 = 1.0 - cs;
      b2 = (1.0 - cs) /2.0;
      a0 = 1.0 + alpha;
      a1 = -2.0 * cs;
      a2 = 1.0 - alpha;
    ):
    filtertype == HIGHPASS ?
    (
      b0 = (1.0 + cs) /2.0;
      b1 = -(1 + cs);
      b2 = (1.0 - cs) /2.0;
      a0 = 1.0 + alpha;
      a1 = -2.0 * cs;
      a2 = 1.0 - alpha;
    ):
    filtertype == BANDPASS ?
    (
     b0 = alpha;
     b1 = 0;
     b2 = -alpha;
     a0 = 1 + alpha;
     a1 = -2 * cs;
     a2 = 1 - alpha;
    ):
    filtertype == NOTCH ?
    (
     b0 = 1;
     b1 = -2 * cs;
     b2 = 1;
     a0 = 1 + alpha;
     a1 = -2 * cs;
     a2 = 1 - alpha;
    ):
    filtertype == PEAK ?  
    (
    b0 = 1 + (alpha * A);
    b1 = -2 * cs;
    b2 = 1 - (alpha * A);
    a0 = 1 + (alpha /A);
    a1 = -2 * cs;
    a2 = 1 - (alpha /A);
    ):
    filtertype == LOWSHELF ?
    (
     b0 = A * ((A + 1) - (A - 1) * cs + beta * sn);
     b1 = 2 * A * ((A - 1) - (A + 1) * cs);
     b2 = A * ((A + 1) - (A - 1) * cs - beta * sn);
     a0 = (A + 1) + (A - 1) * cs + beta * sn;
     a1 = -2 * ((A - 1) + (A + 1) * cs);
     a2 = (A + 1) + (A - 1) * cs - beta * sn;
    ):
    filtertype == HIGHSHELF ?
    (
     b0 = A * ((A + 1) + (A - 1) * cs + beta * sn);
     b1 = -2 * A * ((A - 1) + (A + 1) * cs);
     b2 = A * ((A + 1) + (A - 1) * cs - beta * sn);
     a0 = (A + 1) - (A - 1) * cs + beta * sn;
     a1 = 2 * ((A - 1) - (A + 1) * cs);
     a2 = (A + 1) - (A - 1) * cs - beta * sn;
    );
    
  );
  
  
  
  // filter function basically stolen from chkhld
    // Peak Filter
    //
    function eqPK (SR, Hz, Q, dB) instance (a1, a2, a3, m0, m1, m2) local (A, g, k)
    (
      A = pow(10.0, dB * 0.025); g = tan($PI * (Hz / SR)); k = 1.0 / (Q * A);
      a1 = 1.0 / (1.0 + g * (g + k)); a2 = a1 * g; a3 = a2 * g;
      m0 = 1.0; m1 = k * ((A * A) - 1.0); m2 = 0.0;
    );
    
  //
    // Per-sample EQ band tick function
    //
    function eqTick (sample) instance (v1, v2, v3, ic1eq, ic2eq)
    (
      v3 = sample - ic2eq; v1 = this.a1 * ic1eq + this.a2 * v3;
      v2 = ic2eq + this.a2 * ic1eq + this.a3 * v3;
      ic1eq = 2.0 * v1 - ic1eq; ic2eq = 2.0 * v2 - ic2eq;
      (this.m0 * sample + this.m1 * v1 + this.m2 * v2);
    );