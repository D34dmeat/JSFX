desc:SimpleFilter (d34dmeat)
tags: filter
version: 0.02
author: d34dmeat
changelog: 
  + trying some things out.
provides: 
  simple_data/*
about:
  # test
  this is a test description waiting to happen
  
  # tutorial
  if it actually did something a tutorial would be nice.
  
  ### Demos
  there are no demos at this time.
  
license: MIT

in_pin:left input
in_pin:right input
out_pin:left output 
out_pin:right output


import simple.jsfx-inc


// insert a - before slider text to hide slider -- -Cuts
slider1:Cuts=1<0,4,1>-Cuts
slider2:Freq1=0.2<0,1,.0001>Frequency
slider3:Values=0<0,5,1{Yes,No,Hello,Goodbye,Today,Tonight}>Greetings
slider4:Vol1=0.2<-96,96,.0001>vol

slider5:Bias=0 < 0, 1, .0001 > transistor - > tube(style)

slider6:50<10,200,1>Freqency (Hz)
slider7:-12<-120,12,1>Wet (dB)
slider8:-3<-120,12,1>Dry (dB)

slider64:Gain_val=0 < -96, 96, .0001 > final gain(dB)

// these basic db calculations were stolen from beaunus
function dbToFactor(dbValue)(
    10 ^ (dbValue / 20);
);

function FactorTodb(factor)(
    (20 * log(factor)) / (log(10));
);

@init

b1Det = -exp(-300 / srate );
a0Det = 1.0 + b1Det;

b1Env1 = -exp(-3 / srate );
a0Env1 = 1.0 + b1Env1;
b1Env2 = -exp(-30 / srate );
a0Env2 = 1.0 + b1Env2;

@slider

adj = 2*$pi*slider6 / srate;


wet = 2^(slider7/6);
dry = 2^(slider8/6);

gain = 0;
tmpDet = 0;
tmpEnv1 = 0.1;
tmpEnv2 = 0;

@block

@sample
spl0 *= dbToFactor(Vol1);
spl1 *= dbToFactor(Vol1);


/*
 * Bias signal for tube style processing (more even harmonics.
 */
 bias = Bias / 2;
spl0 *= (1 - (bias));
spl1 *= (1 - (bias));
spl0 += bias;
spl1 += bias;


spl0 *= dbToFactor(Gain_val);
spl1 *= dbToFactor(Gain_val);

/*
 * Un-bias signal.
 */
spl0 -= bias;
spl1 -= bias;
spl0 /= (1 - (bias));
spl1 /= (1 - (bias));

// clip signal
spl0 = max(min(spl0, 1), -1);
spl1 = max(min(spl1, 1), -1);



// added filtering wet/dry from LOSER 50Hz Kicker
det = abs(sqrt(tmpDet = a0Det*(spl0+spl1)*2 - b1Det*tmpDet));
env1 = sqrt(tmpEnv1 = a0Env1*det - b1Env1*tmpEnv1);
env2 = sqrt(tmpEnv2 = a0Env2*det - b1Env2*tmpEnv2);

gain = min(max(env2/env1,1)-1,1);

gain == 0 ? pos=0;

spl0 = sin(pos)*gain*wet + spl0*dry;
spl1 = sin(pos)*gain*wet + spl1*dry;

pos += adj;