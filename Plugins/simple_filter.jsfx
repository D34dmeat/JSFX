desc:SimpleFilter (d34dmeat)
tags: filter processing equalizer
version: 0.0312
author: d34dmeat
changelog: 
  + trying some things out.
provides: 
  simple_data/*
about:
  # test
  this is a test description waiting to happen
  
  # tutorial
  if it actually did something a tutorial would be nice.
  
  ### Demos
  there are no demos at this time.
  
license: MIT
/*end*/
in_pin:left input
in_pin:right input
out_pin:left output 
out_pin:right output


import simple.jsfx-inc


// insert a - before slider text to hide slider -- -Cuts
slider1:Cuts=1<0,4,1>-Cuts
slider2:Freq1=2000<20,20000,.1>Frequency center
slider3:Values=0<0,3,1{Multiply,Subtract,Add,Replace,None}>Filter processing
slider4:Vol1=0.2<-96,96,.0001>vol

slider5:BBias=0 < 0, 1, .0001 > transistor - > tube(style)

slider6:50<10,20000,1>Freqency (Hz)
slider7:-12<-120,12,1>Wet (dB)
slider8:-3<-120,12,1>Dry (dB)
slider9:mid_gain=-3<-120,24,1> Strange loudness Midgain (dB)
slider10:filter_db=-30<-120,92,1>Filter gain (dB)
slider11:Q=0.25<0,6,.001>Q


slider12:bq_db=-30<-120,92,1>BQ Filter gain (dB)
slider13:bq_Q=0.25<0,6,.001>BQ Q
slider14:bq_Freq=2000<20,20000,.1>BQ Frequency (Hz)
slider15:bq_filtertype=0<0,7,1{Lowpass,Highpass,Bandpass,Notch,Peak,Lowshelf,Highshelf,One pole LP,One pole HP}>BQ Filter type
slider16:bq_filter=0<0,2,1{No,Yes,Alternate}>Apply BQ Filter

slider18:0<0,100,.01>saturation
slider19:sat_gain=0<-120,92,1>Saturation gain (dB)
slider20:1<0,20,1>saturation multiply

slider64:Gain_val=0 < -96, 96, .0001 >final gain(dB)

/ these basic db calculations were stolen from beaunus


@init
  buf = 500;
    idx = 0;
    g_height = 0;
function t_add(smpl)
    instance(s, i, v) global(buf,g_height,idx)
    (
    s=0;
    v=0;
    //s[idx] = (-(smpl)*g_height*0.9)+g_height/2;
    
    //v[idx+1] = smpl; 
    
    );
    
function update_add(smpl)
    local(i) global(buf,g_height,idx)
    (
    i=idx;
    this.s[i] = (-(smpl)*g_height*0.9)+g_height/2;
    
    this.v[i+1] = smpl; 
    
    );
    
    
  
  function g_add(smpl)
    instance(s,i) global(buf,g_height)
    (
    i=0;
    while(i<buf)(
    s[i]=s[i+1];
    s[i+1] = (-(smpl)*g_height*0.9)+g_height/2;
    i+=1;
    );
    );
  hist.t_add(0);

// these basic db calculations were stolen from beaunus
function dbToFactor(dbValue)(
    10 ^ (dbValue / 20);
  );

function FactorTodb(factor)(
    (20 * log(factor)) / (log(10));
  );
  
//Trying out adding filters  
filterL.eqPK(srate, Freq1, Q, filter_db); 
filterR.eqPK(srate, Freq1, Q, filter_db);

bq_filterL.bq_create(bq_filtertype, bq_db, bq_Q, bq_Freq, 1000);
bq_filterR.bq_create(bq_filtertype, bq_db, bq_Q, bq_Freq, 1000);
//multi_filter=0;
function int_multifilter()instance(L,R)( 
    L.altBiquad(bq_filtertype, bq_Freq, srate, bq_Q, bq_db);
    R.altBiquad(bq_filtertype, bq_Freq, srate, bq_Q, bq_db);
    this;
);

function update_multifilter(filter_num)instance(T,filt_index)(
  //filter_num = 1;
  filt_index=0;
  while(filt_index<filter_num)(
  
   T[filt_index] = int_multifilter();
    filt_index += 1;
    );
);

//multi_filter.update_multifilter(1);
multi_filter.int_multifilter();
//bq_temp=0;

bias = 0;

b1Det = -exp(-300 / srate );
a0Det = 1.0 + b1Det;

b1Env1 = -exp(-3 / srate );
a0Env1 = 1.0 + b1Env1;
b1Env2 = -exp(-20 / srate );
a0Env2 = 1.0 + b1Env2;

@slider

adj = 2*$pi*slider6 / srate;

bias = BBias / 2;
wet = 2^(slider7/6);
dry = 2^(slider8/6);

bq_filterL.bq_create(bq_filtertype, bq_db, bq_q, bq_Freq, 1000);
bq_filterR.bq_create(bq_filtertype, bq_db, bq_q, bq_Freq, 1000);

//multi_filter.update_multifilter(1);
multi_filter.int_multifilter();

foo=slider18/200*$pi;
bar = sin(slider18/200*$pi);


gain = 0;
tmpDet = 0;
tmpEnv1 = 0.1;
tmpEnv2 = 0;
//buf[] = 0,0,0;

@block

  

@sample
spl0 *= dbToFactor(Vol1);
spl1 *= dbToFactor(Vol1);
filterL.eqPK(srate, Freq1, Q, filter_db); 
filterR.eqPK(srate, Freq1, Q, filter_db);



/*
 * Bias signal for tube style processing (more even harmonics.
 */
 
// bias = Bias / 2;
spl0 *= (1 - (bias));
spl1 *= (1 - (bias));
spl0 += bias;
spl1 += bias;



//saturation
slider18 ?(
i = 0;
while(i<slider20)(
spl0 += min(max( sin(max(min(spl0,1),-1)*foo)/bar ,-1) ,1)*dbToFactor(sat_gain);
spl1 += min(max( sin(max(min(spl1,1),-1)*foo)/bar ,-1) ,1)*dbToFactor(sat_gain);
i += 1;
);
);

mgain = pregain(mid_gain);

values == 0 ?
  (
  spl0 *= filterL.eqTick(spl0);
  spl1 *= filterR.eqTick(spl1);
  ): values == 1 ?
  (
    spl0 -= filterL.eqTick(spl0);
    spl1 -= filterR.eqTick(spl1);
    )
    :values == 2 ?
    (
      spl0 += filterL.eqTick(spl0);
      spl1 += filterR.eqTick(spl1);
      )
    :values == 3 ?
        (
          spl0 = filterL.eqTick(spl0);
          spl1 = filterR.eqTick(spl1);
          );
          
  bq_filter == 1 ?(        
  spl0 = bq_filterL.bq_process(spl0);
  spl1 = bq_filterR.bq_process(spl1);
  );
  
/*
 * Un-bias signal.
 */
 
spl0 -= bias;
spl1 -= bias;
spl0 /= (1 - (bias));
spl1 /= (1 - (bias));

// clip signal
//spl0 = max(min(spl0, 1), -1);
//spl1 = max(min(spl1, 1), -1);

//bq_temp = multi_filter;
 bq_filter == 2 ?(
spl0=multi_filter.R.bq_process(spl0);
spl1=multi_filter.L.bq_process(spl1);
);
// added sine wet/dry from LOSER 50Hz Kicker
det = abs(sqrt(tmpDet = a0Det*(spl0+spl1)*2 - b1Det*tmpDet));
env1 = sqrt(tmpEnv1 = a0Env1*det - b1Env1*tmpEnv1);
env2 = sqrt(tmpEnv2 = a0Env2*det - b1Env2*tmpEnv2);

gain = min(max(env2/env1,1)-1,1);

gain == 0 ? pos=0;

spl0 = sin(pos)*gain*wet + spl0*dry + spl0*mgain;
spl1 = sin(pos)*gain*wet + spl1*dry + spl1*mgain;

// clip signal
spl0 = max(min(spl0, 1), -1);
spl1 = max(min(spl1, 1), -1);

spl0 *= dbToFactor(Gain_val);
spl1 *= dbToFactor(Gain_val);

//hist = spl1;
//hist.g_add(spl0);
idx <= buf ?(
hist.update_add(spl0);
//hist.s[idx] = (-(spl0)*g_height*0.9)+g_height/2;
//hist.v[idx] = spl0;
idx+=1;
):
(idx=0;);
pos += adj;



@gfx 400 400 
    
   sz=min(gfx_w,gfx_h);
   top = (gfx_h-sz)*0.5;
   left = (gfx_w-sz)*0.5;
   right=gfx_w-left;
   bottom=gfx_h-top;
   g_height=gfx_h;
   g_width=gfx_w/buf;
   //i<idx-10? (i = idx;);

    gfx_a=0.3;
    gfx_r=gfx_g=gfx_b=1;
    
    gfx_x=left; gfx_y=gfx_h*0.5;
    gfx_lineto(right,gfx_y,0);
    gfx_x=gfx_w*0.5; gfx_y=top;
    gfx_lineto(gfx_x, bottom,0);
    
    gfx_x=left; gfx_y=bottom;
    gfx_lineto(right,top,0);
    
    gfx_a=0.8;
    gfx_g=0;
    gfx_x=gfx_w*0.5; gfx_y=gfx_h*0.5;
    
    gfx_printf("%s%.1f%s%.1f","s value:",hist.s[idx]," v value: ",hist.sov[idx]);
    //gfx_printf(#floorstr,"%s","stringent");
    //sprintf(#flo,"%s%.1fdB",gfx_w<420?"":"floor: ",slider2);
    //gfx_printf("%s%.1fdB",gfx_w<420?"":"floor: ",slider2);
    
    //gfx_x=g_width*idx;
    //gfx_y=hist.s[idx-1];
    
    //gfx_lineto((gfx_w/buf)*(idx+1),-(spl1*sz)+g_height/2,20);
    //gfx_rect(100,10,30,2+((max(0,hist.s[i]))*gfx_h*1.9));
    
    //gfx_lineto(gfx_x+g_width,hist.s[idx],20);
    bq_filter == 1 ?(
    bq_filterL.bq_display(10,10);
    ):(
    //multi_filter.T[0]
    multi_filter.L.bq_display(gfx_w*.5+10,10);
    );
    
    function draw()local(sp,i,medi)
    (
    gfx_x=0;
    sp=gfx_w/buf;
    i=medi=0;
    while(gfx_x<gfx_W)(
    gfx_lineto(gfx_x+sp,this.s[i],0);
    //medi+=max(0,this.s[i]);
    medi += abs(this.v[i])-60;
    gfx_x+=sp;
    i+=1;
    );
    gfx_rect(gfx_w/2-25,gfx_h*0.5,medi/buf,medi/buf);
    gfx_line(gfx_w/2-25,gfx_h*0.5,gfx_w/2-25,gfx_h*0.3+medi/buf);
    );
    
    
    
    function t_draw(i)local(sp,medi)
        (
        
        sp=gfx_w/buf;
        gfx_x=i*sp;
        gfx_y=this.s[max(0,i-1)];
        //medi=i;
        //while(gfx_x<gfx_W)(
        gfx_lineto(gfx_x+sp,this.s[i],20);
        medi+=max(0,this.s[i]);
        //gfx_x+=sp;
        //i+=1;
        //);
        gfx_rect(gfx_w/2,100,50,(medi/i));
        );
    hist.draw();
    //hist.t_draw(idx);
